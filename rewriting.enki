use parsing.
do not use base.

match Term with Pat is
    when Pat = variable Y then singleton list Y |-> Term;
    when Term = constant X, Pat = constant X then empty;
    when Term = function S Terms, Pat = function S Pats then
        flatten zip same length (match _ with _) Terms and Pats.

substitute in Term using Theta is
    when Term = function S Terms then function S (map (substitute in _ using Theta) over Terms);
    when Term = variable Var then
        when Theta contains (Var |-> NewTerm) then NewTerm;
        default Term;
    default Term = constant X, Term.

subterm of Term at position P is
    when P = Idx :: Idxs,
         Term = function S Terms then
         subterm of (Idx th element of Terms) at position Idxs;
    default P = empty, Term.

replace subterm of Term at position P with NewTerm is
    when P = Idx :: Idxs,
         Term = function S Terms then
            NewArg = replace subterm of (Idx th element of Terms) at position Idxs with NewTerm,
            function S (set index Idx of Terms to NewArg);
    default P = empty, NewTerm.

apply rule (rl LHS => RHS) to Term is
    U = subterm of Term at position P,
    match U with LHS = Theta,
    replace subterm of Term at position P with substitute in RHS using Theta.

evaluate Term using Rules is
    display ("Evaluating " .. (format term Term)),

    when Rules contains Rule, apply rule Rule to Term = NewTerm then
        -- display ("Using rule: " .. format rule Rule),
        -- display ("Evaluating " .. (format term Term) .. " => " .. (format term NewTerm)),
        evaluate NewTerm using Rules;
    default Term.

nat rules are
    cons (parse rule "if(true(),A,B)=>A") (
    cons (parse rule "if(false(),A,B)=>B") (
    cons (parse rule "+(0,M)=>M") (
    cons (parse rule "+(s(N),M)=>s(+(N,M))") (
    cons (parse rule "*(0,M)=>0") (
    cons (parse rule "*(s(N),M)=>+(M,*(N,M))") (
    cons (parse rule "<=(0,N)=>true()") (
    cons (parse rule "<=(s(N),s(M))=><=(N,M)") (
    cons (parse rule "<=(s(N),0)=>false()") (
    cons (parse rule "range(Low,High)=>if(<=(Low,High),cons(Low,range(s(Low),High)),nil())") (
    cons (parse rule "nums(0)=>cons(0,nil())") (
    cons (parse rule "nums(s(N))=>cons(s(N),nums(N))") (
    cons (parse rule "sum(nil())=>0") (
    cons (parse rule "sum(cons(X,Xs))=>+(X,sum(Xs))") empty))))))))))))).

func Name Arg is function Name (singleton list Arg).

as succ nat N is
    when N = 0 then constant 0;
    when N > 0 then func "s" (as succ nat (N - 1)).

A = as succ nat 2,
B = as succ nat 10,
BaseTerm = parse term "+(sum(range(0,+(A,B))),sum(range(A,B)))",
Term = substitute in BaseTerm using (cons ("A" |-> A) (cons ("B" |-> B) empty)),
display format term evaluate Term using nat rules.

